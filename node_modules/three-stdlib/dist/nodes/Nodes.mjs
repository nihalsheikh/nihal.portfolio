import ArrayUniformNode from "./core/ArrayUniformNode.mjs";
import AttributeNode from "./core/AttributeNode.mjs";
import BypassNode from "./core/BypassNode.mjs";
import CodeNode from "./core/CodeNode.mjs";
import ConstNode from "./core/ConstNode.mjs";
import ContextNode from "./core/ContextNode.mjs";
import ExpressionNode from "./core/ExpressionNode.mjs";
import FunctionCallNode from "./core/FunctionCallNode.mjs";
import FunctionNode from "./core/FunctionNode.mjs";
import Node from "./core/Node.mjs";
import NodeAttribute from "./core/NodeAttribute.mjs";
import NodeBuilder from "./core/NodeBuilder.mjs";
import NodeCode from "./core/NodeCode.mjs";
import NodeFrame from "./core/NodeFrame.mjs";
import NodeFunctionInput from "./core/NodeFunctionInput.mjs";
import NodeKeywords from "./core/NodeKeywords.mjs";
import NodeUniform from "./core/NodeUniform.mjs";
import NodeVar from "./core/NodeVar.mjs";
import NodeVary from "./core/NodeVary.mjs";
import PropertyNode from "./core/PropertyNode.mjs";
import TempNode from "./core/TempNode.mjs";
import UniformNode from "./core/UniformNode.mjs";
import VarNode from "./core/VarNode.mjs";
import VaryNode from "./core/VaryNode.mjs";
import BufferNode from "./accessors/BufferNode.mjs";
import CameraNode from "./accessors/CameraNode.mjs";
import CubeTextureNode from "./accessors/CubeTextureNode.mjs";
import MaterialNode from "./accessors/MaterialNode.mjs";
import MaterialReferenceNode from "./accessors/MaterialReferenceNode.mjs";
import ModelNode from "./accessors/ModelNode.mjs";
import ModelViewProjectionNode from "./accessors/ModelViewProjectionNode.mjs";
import NormalNode from "./accessors/NormalNode.mjs";
import Object3DNode from "./accessors/Object3DNode.mjs";
import PointUVNode from "./accessors/PointUVNode.mjs";
import PositionNode from "./accessors/PositionNode.mjs";
import ReferenceNode from "./accessors/ReferenceNode.mjs";
import ReflectNode from "./accessors/ReflectNode.mjs";
import SkinningNode from "./accessors/SkinningNode.mjs";
import TextureNode from "./accessors/TextureNode.mjs";
import UVNode from "./accessors/UVNode.mjs";
import ColorSpaceNode from "./display/ColorSpaceNode.mjs";
import NormalMapNode from "./display/NormalMapNode.mjs";
import MathNode from "./math/MathNode.mjs";
import OperatorNode from "./math/OperatorNode.mjs";
import CondNode from "./math/CondNode.mjs";
import LightContextNode from "./lights/LightContextNode.mjs";
import LightNode from "./lights/LightNode.mjs";
import LightsNode from "./lights/LightsNode.mjs";
import ArrayElementNode from "./utils/ArrayElementNode.mjs";
import ConvertNode from "./utils/ConvertNode.mjs";
import JoinNode from "./utils/JoinNode.mjs";
import SplitNode from "./utils/SplitNode.mjs";
import SpriteSheetUVNode from "./utils/SpriteSheetUVNode.mjs";
import MatcapUVNode from "./utils/MatcapUVNode.mjs";
import OscNode from "./utils/OscNode.mjs";
import TimerNode from "./utils/TimerNode.mjs";
import NodeLoader from "./loaders/NodeLoader.mjs";
import NodeObjectLoader from "./loaders/NodeObjectLoader.mjs";
import NodeMaterialLoader from "./loaders/NodeMaterialLoader.mjs";
import CheckerNode from "./procedural/CheckerNode.mjs";
import FogNode from "./fog/FogNode.mjs";
import FogRangeNode from "./fog/FogRangeNode.mjs";
import { NodeShaderStage, NodeType, NodeUpdateType } from "./core/constants.mjs";
import { BRDF_GGX, BRDF_Lambert, D_GGX, F_Schlick, PhysicalLightingModel, RE_Direct_Physical, V_GGX_SmithCorrelated, getDistanceAttenuation } from "./functions/BSDFs.mjs";
import "./materials/Materials.mjs";
import { EPSILON, INFINITY, ShaderNode, abs, acos, add, addTo, alphaTest, and, asin, assign, atan, attribute, bitAnd, bitOr, bitXor, bmat3, bmat4, bool, buffer, bvec2, bvec3, bvec4, cameraPosition, ceil, clamp, color, cond, cos, cross, dFdx, dFdy, degrees, diffuseColor, distance, div, dot, element, equal, exp, exp2, faceforward, float, floor, fract, greaterThan, greaterThanEqual, imat3, imat4, int, inversesqrt, invert, ivec2, ivec3, ivec4, join, label, length, lessThan, lessThanEqual, log, log2, mat3, mat4, max, metalness, min, mix, mod, mul, negate, nodeObject, normalGeometry, normalLocal, normalView, normalWorld, normalize, or, positionLocal, positionView, positionViewDirection, positionWorld, pow, pow2, pow3, pow4, radians, reflect, refract, remainder, roughness, round, sampler, saturate, shiftLeft, shiftRight, sign, sin, smoothstep, specularColor, sqrt, step, sub, tan, temp, texture, transformDirection, transformedNormalView, uint, umat3, umat4, uniform, uv, uvec2, uvec3, uvec4, vec2, vec3, vec4, viewMatrix, xor } from "./ShaderNode.mjs";
import { default as default2 } from "./materials/LineBasicNodeMaterial.mjs";
import { default as default3 } from "./materials/MeshBasicNodeMaterial.mjs";
import { default as default4 } from "./materials/MeshStandardNodeMaterial.mjs";
import { default as default5 } from "./materials/PointsNodeMaterial.mjs";
const nodeLib = {
  // core
  ArrayUniformNode,
  AttributeNode,
  BypassNode,
  CodeNode,
  ContextNode,
  ConstNode,
  ExpressionNode,
  FunctionCallNode,
  FunctionNode,
  Node,
  NodeAttribute,
  NodeBuilder,
  NodeCode,
  NodeFrame,
  NodeFunctionInput,
  NodeKeywords,
  NodeUniform,
  NodeVar,
  NodeVary,
  PropertyNode,
  TempNode,
  UniformNode,
  VarNode,
  VaryNode,
  // accessors
  BufferNode,
  CameraNode,
  CubeTextureNode,
  MaterialNode,
  MaterialReferenceNode,
  ModelNode,
  ModelViewProjectionNode,
  NormalNode,
  Object3DNode,
  PointUVNode,
  PositionNode,
  ReferenceNode,
  ReflectNode,
  SkinningNode,
  TextureNode,
  UVNode,
  // display
  ColorSpaceNode,
  NormalMapNode,
  // math
  MathNode,
  OperatorNode,
  CondNode,
  // lights
  LightContextNode,
  LightNode,
  LightsNode,
  // utils
  ArrayElementNode,
  ConvertNode,
  JoinNode,
  SplitNode,
  SpriteSheetUVNode,
  MatcapUVNode,
  OscNode,
  TimerNode,
  // procedural
  CheckerNode,
  // fog
  FogNode,
  FogRangeNode,
  // loaders
  NodeLoader,
  NodeObjectLoader,
  NodeMaterialLoader
};
const fromType = (type) => {
  return new nodeLib[type]();
};
export {
  ArrayElementNode,
  ArrayUniformNode,
  AttributeNode,
  BRDF_GGX,
  BRDF_Lambert,
  BufferNode,
  BypassNode,
  CameraNode,
  CheckerNode,
  CodeNode,
  ColorSpaceNode,
  CondNode,
  ConstNode,
  ContextNode,
  ConvertNode,
  CubeTextureNode,
  D_GGX,
  EPSILON,
  ExpressionNode,
  F_Schlick,
  FogNode,
  FogRangeNode,
  FunctionCallNode,
  FunctionNode,
  INFINITY,
  JoinNode,
  LightContextNode,
  LightNode,
  LightsNode,
  default2 as LineBasicNodeMaterial,
  MatcapUVNode,
  MaterialNode,
  MaterialReferenceNode,
  MathNode,
  default3 as MeshBasicNodeMaterial,
  default4 as MeshStandardNodeMaterial,
  ModelNode,
  ModelViewProjectionNode,
  Node,
  NodeAttribute,
  NodeBuilder,
  NodeCode,
  NodeFrame,
  NodeFunctionInput,
  NodeKeywords,
  NodeLoader,
  NodeMaterialLoader,
  NodeObjectLoader,
  NodeShaderStage,
  NodeType,
  NodeUniform,
  NodeUpdateType,
  NodeVar,
  NodeVary,
  NormalMapNode,
  NormalNode,
  Object3DNode,
  OperatorNode,
  OscNode,
  PhysicalLightingModel,
  PointUVNode,
  default5 as PointsNodeMaterial,
  PositionNode,
  PropertyNode,
  RE_Direct_Physical,
  ReferenceNode,
  ReflectNode,
  ShaderNode,
  SkinningNode,
  SplitNode,
  SpriteSheetUVNode,
  TempNode,
  TextureNode,
  TimerNode,
  UVNode,
  UniformNode,
  V_GGX_SmithCorrelated,
  VarNode,
  VaryNode,
  abs,
  acos,
  add,
  addTo,
  alphaTest,
  and,
  asin,
  assign,
  atan,
  attribute,
  bitAnd,
  bitOr,
  bitXor,
  bmat3,
  bmat4,
  bool,
  buffer,
  bvec2,
  bvec3,
  bvec4,
  cameraPosition,
  ceil,
  clamp,
  color,
  cond,
  cos,
  cross,
  dFdx,
  dFdy,
  degrees,
  diffuseColor,
  distance,
  div,
  dot,
  element,
  equal,
  exp,
  exp2,
  faceforward,
  float,
  floor,
  fract,
  fromType,
  getDistanceAttenuation,
  greaterThan,
  greaterThanEqual,
  imat3,
  imat4,
  int,
  inversesqrt,
  invert,
  ivec2,
  ivec3,
  ivec4,
  join,
  label,
  length,
  lessThan,
  lessThanEqual,
  log,
  log2,
  mat3,
  mat4,
  max,
  metalness,
  min,
  mix,
  mod,
  mul,
  negate,
  nodeObject,
  normalGeometry,
  normalLocal,
  normalView,
  normalWorld,
  normalize,
  or,
  positionLocal,
  positionView,
  positionViewDirection,
  positionWorld,
  pow,
  pow2,
  pow3,
  pow4,
  radians,
  reflect,
  refract,
  remainder,
  roughness,
  round,
  sampler,
  saturate,
  shiftLeft,
  shiftRight,
  sign,
  sin,
  smoothstep,
  specularColor,
  sqrt,
  step,
  sub,
  tan,
  temp,
  texture,
  transformDirection,
  transformedNormalView,
  uint,
  umat3,
  umat4,
  uniform,
  uv,
  uvec2,
  uvec3,
  uvec4,
  vec2,
  vec3,
  vec4,
  viewMatrix,
  xor
};
