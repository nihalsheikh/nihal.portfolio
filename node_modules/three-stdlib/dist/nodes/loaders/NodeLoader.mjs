import { Loader } from "three";
import ArrayUniformNode from "../core/ArrayUniformNode.mjs";
import AttributeNode from "../core/AttributeNode.mjs";
import BypassNode from "../core/BypassNode.mjs";
import CodeNode from "../core/CodeNode.mjs";
import ConstNode from "../core/ConstNode.mjs";
import ContextNode from "../core/ContextNode.mjs";
import ExpressionNode from "../core/ExpressionNode.mjs";
import FunctionCallNode from "../core/FunctionCallNode.mjs";
import FunctionNode from "../core/FunctionNode.mjs";
import Node from "../core/Node.mjs";
import NodeAttribute from "../core/NodeAttribute.mjs";
import NodeBuilder from "../core/NodeBuilder.mjs";
import NodeCode from "../core/NodeCode.mjs";
import NodeFrame from "../core/NodeFrame.mjs";
import NodeFunctionInput from "../core/NodeFunctionInput.mjs";
import NodeKeywords from "../core/NodeKeywords.mjs";
import NodeUniform from "../core/NodeUniform.mjs";
import NodeVar from "../core/NodeVar.mjs";
import NodeVary from "../core/NodeVary.mjs";
import PropertyNode from "../core/PropertyNode.mjs";
import TempNode from "../core/TempNode.mjs";
import UniformNode from "../core/UniformNode.mjs";
import VarNode from "../core/VarNode.mjs";
import VaryNode from "../core/VaryNode.mjs";
import BufferNode from "../accessors/BufferNode.mjs";
import CameraNode from "../accessors/CameraNode.mjs";
import CubeTextureNode from "../accessors/CubeTextureNode.mjs";
import MaterialNode from "../accessors/MaterialNode.mjs";
import MaterialReferenceNode from "../accessors/MaterialReferenceNode.mjs";
import ModelNode from "../accessors/ModelNode.mjs";
import ModelViewProjectionNode from "../accessors/ModelViewProjectionNode.mjs";
import NormalNode from "../accessors/NormalNode.mjs";
import Object3DNode from "../accessors/Object3DNode.mjs";
import PointUVNode from "../accessors/PointUVNode.mjs";
import PositionNode from "../accessors/PositionNode.mjs";
import ReferenceNode from "../accessors/ReferenceNode.mjs";
import ReflectNode from "../accessors/ReflectNode.mjs";
import SkinningNode from "../accessors/SkinningNode.mjs";
import TextureNode from "../accessors/TextureNode.mjs";
import UVNode from "../accessors/UVNode.mjs";
import ColorSpaceNode from "../display/ColorSpaceNode.mjs";
import NormalMapNode from "../display/NormalMapNode.mjs";
import MathNode from "../math/MathNode.mjs";
import OperatorNode from "../math/OperatorNode.mjs";
import CondNode from "../math/CondNode.mjs";
import LightContextNode from "../lights/LightContextNode.mjs";
import LightNode from "../lights/LightNode.mjs";
import LightsNode from "../lights/LightsNode.mjs";
import ArrayElementNode from "../utils/ArrayElementNode.mjs";
import ConvertNode from "../utils/ConvertNode.mjs";
import JoinNode from "../utils/JoinNode.mjs";
import SplitNode from "../utils/SplitNode.mjs";
import SpriteSheetUVNode from "../utils/SpriteSheetUVNode.mjs";
import MatcapUVNode from "../utils/MatcapUVNode.mjs";
import OscNode from "../utils/OscNode.mjs";
import TimerNode from "../utils/TimerNode.mjs";
import CheckerNode from "../procedural/CheckerNode.mjs";
import FogNode from "../fog/FogNode.mjs";
import FogRangeNode from "../fog/FogRangeNode.mjs";
const nodeLib = {
  // core
  ArrayUniformNode,
  AttributeNode,
  BypassNode,
  CodeNode,
  ContextNode,
  ConstNode,
  ExpressionNode,
  FunctionCallNode,
  FunctionNode,
  Node,
  NodeAttribute,
  NodeBuilder,
  NodeCode,
  NodeFrame,
  NodeFunctionInput,
  NodeKeywords,
  NodeUniform,
  NodeVar,
  NodeVary,
  PropertyNode,
  TempNode,
  UniformNode,
  VarNode,
  VaryNode,
  // accessors
  BufferNode,
  CameraNode,
  CubeTextureNode,
  MaterialNode,
  MaterialReferenceNode,
  ModelNode,
  ModelViewProjectionNode,
  NormalNode,
  Object3DNode,
  PointUVNode,
  PositionNode,
  ReferenceNode,
  ReflectNode,
  SkinningNode,
  TextureNode,
  UVNode,
  // display
  ColorSpaceNode,
  NormalMapNode,
  // math
  MathNode,
  OperatorNode,
  CondNode,
  // lights
  LightContextNode,
  LightNode,
  LightsNode,
  // utils
  ArrayElementNode,
  ConvertNode,
  JoinNode,
  SplitNode,
  SpriteSheetUVNode,
  MatcapUVNode,
  OscNode,
  TimerNode,
  // procedural
  CheckerNode,
  // fog
  FogNode,
  FogRangeNode
};
const fromType = (type2) => {
  return new nodeLib[type2]();
};
class NodeLoader extends Loader {
  constructor(manager) {
    super(manager);
    this.textures = {};
  }
  load(url, onLoad, onProgress, onError) {
    const loader = new FileLoader(this.manager);
    loader.setPath(this.path);
    loader.setRequestHeader(this.requestHeader);
    loader.setWithCredentials(this.withCredentials);
    loader.load(
      url,
      (text) => {
        try {
          onLoad(this.parse(JSON.parse(text)));
        } catch (e) {
          if (onError) {
            onError(e);
          } else {
            console.error(e);
          }
          this.manager.itemError(url);
        }
      },
      onProgress,
      onError
    );
  }
  parseNodes(json) {
    const nodes = {};
    if (json !== void 0) {
      for (const nodeJSON of json) {
        const { uuid, type: type2 } = nodeJSON;
        nodes[uuid] = fromType(type2);
        nodes[uuid].uuid = uuid;
      }
      const meta = { nodes, textures: this.textures };
      for (const nodeJSON of json) {
        nodeJSON.meta = meta;
        const node = nodes[nodeJSON.uuid];
        node.deserialize(nodeJSON);
        delete nodeJSON.meta;
      }
    }
    return nodes;
  }
  parse(json) {
    const node = fromType(type);
    node.uuid = json.uuid;
    const nodes = this.parseNodes(json.inputNodes);
    const meta = { nodes, textures: this.textures };
    json.meta = meta;
    node.deserialize(json);
    delete json.meta;
    return node;
  }
  setTextures(value) {
    this.textures = value;
    return this;
  }
}
export {
  NodeLoader as default
};
